#! /usr/bin/env python3

import numpy as np
import typer
from rich import print as echo
from typing import List

strip = lambda x: x.strip().strip("(").strip(")")

# hook_bec = "Effective charges (d Force / dE) in cartesian axis with asr"
hook_bec = "Effective charges (d Force / dE) in cartesian axis without acoustic sum rule"


def parse_epsilon(fp) -> np.ndarray:
    """parse the dielectric tensor"""
    next(fp)  # skip 1 line
    lines = [strip(next(fp)) for _ in range(3)]
    return np.array([np.fromstring(x, sep=" ") for x in lines])


def parse_bec(fp, natoms) -> np.ndarray:
    """parse the BEC"""
    next(fp)  # skip 1 line
    bec = []
    for _ in range(natoms):
        next(fp)
        bec.extend(next(fp).split()[2:5] for _ in range(3))

    return np.reshape(bec, (natoms, 3, 3)).astype(float)


def parse_ph_out(file: str) -> dict:
    """Parse BEC and dielectric tensor from QE ph.x output"""

    with open(file) as f:
        for line in f:
            if "number of atoms/cell      =" in line:
                natoms = int(line.split()[4])

            if "Dielectric constant in cartesian axis" in line:
                echo(".. parse dielectric tensor")
                epsilon = parse_epsilon(f)
                echo(epsilon)

            if hook_bec in line:
                echo(f".. parse BEC for {natoms} atoms")
                bec = parse_bec(f, natoms=natoms)
                # echo(bec)

    return epsilon, bec


app = typer.Typer()


@app.command()
def main(files: List[str]):
    """Parse BEC and dielectric tensor from QE ph.x output"""
    for file in files:
        echo(f".. parse {file}")
        epsilon, bec = parse_ph_out(file)
        echo(".. sum rule violation:")
        echo(f"{bec.sum(axis=0)}")


if __name__ == "__main__":
    app()
